<?php include 'cabecera.inc'; ?>

<h1>Java</h1>
<hr/>

<p class="text-justify">
Java es un lenguaje de programaci√≥n de prop√≥sito general, concurrente, orientado a objetos, que fue dise√±ado espec√≠ficamente para tener tan pocas dependencias de 
implementaci√≥n como fuera posible. Su intenci√≥n es permitir que los desarrolladores de aplicaciones escriban el programa una vez y lo ejecuten en cualquier 
dispositivo (conocido en ingl√©s como WORA, o "write once, run anywhere"), lo que quiere decir que el c√≥digo que es ejecutado en una plataforma no tiene que ser 
recompilado para correr en otra. Java es, a partir de 2012, uno de los lenguajes de programaci√≥n m√°s populares en uso, particularmente para aplicaciones de 
cliente-servidor de web, con unos diez millones de usuarios reportados.<br/><br/>
El lenguaje de programaci√≥n Java fue originalmente desarrollado por James Gosling, de Sun Microsystems (constituida en 1982 y posteriormente adquirida el 27 de enero
de 2010 por la compa√±√≠a Oracle),4‚Äã y publicado en 1995 como un componente fundamental de la plataforma Java de Sun Microsystems. Su sintaxis deriva en gran medida de 
C y C++, pero tiene menos utilidades de bajo nivel que cualquiera de ellos. Las aplicaciones de Java son compiladas a bytecode (clase Java), que puede ejecutarse en 
cualquier m√°quina virtual Java (JVM) sin importar la arquitectura de la computadora subyacente.<br/><br/>
La compa√±√≠a Sun desarroll√≥ la implementaci√≥n de referencia original para los compiladores de Java, m√°quinas virtuales y librer√≠as de clases en 1991, y las public√≥ por 
primera vez en 1995. A partir de mayo de 2007, en cumplimiento de las especificaciones del Proceso de la Comunidad Java, Sun volvi√≥ a licenciar la mayor√≠a de sus 
tecnolog√≠as de Java bajo la Licencia P√∫blica General de GNU. Otros tambi√©n han desarrollado implementaciones alternas a estas tecnolog√≠as de Sun, tales como el 
Compilador de Java de GNU y el GNU Classpath. 
</p>

<img src="https://cdn-images-1.medium.com/max/1600/1*7Kqu2b7kSmpj45g4X1_DKA.jpeg" class="img-fluid" alt="Responsive image" width="100%">

<hr/>
<h1>Historia de Java</h1>
<hr/>


<div class="embed-responsive embed-responsive-16by9">
  <iframe class="embed-responsive-item" src="https://www.youtube.com/embed/RUEnLW3Cu6g" allowfullscreen></iframe>
</div>


<hr/>
<h1>Caracter√≠sticas de Java</h1>
<hr/>

<p class="text-justify">
El lenguaje Java se cre√≥ con cinco objetivos principales:<br/><br/>
1. Deber√≠a usar el paradigma de la programaci√≥n orientada a objetos.<br/>
2. Deber√≠a permitir la ejecuci√≥n de un mismo programa en m√∫ltiples sistemas operativos.<br/>
3. Deber√≠a incluir por defecto soporte para trabajo en red.<br/>
4. Deber√≠a dise√±arse para ejecutar c√≥digo en sistemas remotos de forma segura.<br/>
5. Deber√≠a ser f√°cil de usar y tomar lo mejor de otros lenguajes orientados a objetos, como C++.<br/><br/>
Para conseguir la ejecuci√≥n de c√≥digo remoto y el soporte de red, los programadores de Java a veces recurren a extensiones como CORBA (Common Object Request Broker 
Architecture), Internet Communications Engine u OSGi, respectivamente.<br/><br/>

<b>Orientado a objetos</b><br/><br/>
La primera caracter√≠stica, orientado a objetos (‚ÄúOO‚Ä?), se refiere a un m√©todo de programaci√≥n y al dise√±o del lenguaje. Aunque hay muchas interpretaciones para OO, 
una primera idea es dise√±ar el software de forma que los distintos tipos de datos que usen est√©n unidos a sus operaciones. As√≠, los datos y el c√≥digo (funciones o m√©todos) 
se combinan en entidades llamadas objetos. Un objeto puede verse como un paquete que contiene el ‚Äúcomportamiento‚Ä? (el c√≥digo) y el ‚Äúestado‚Ä? (datos). 
El principio es separar aquello que cambia de las cosas que permanecen inalterables. Frecuentemente, cambiar una estructura de datos implica un cambio en el c√≥digo 
que opera sobre los mismos, o viceversa. Esta separaci√≥n en objetos coherentes e independientes ofrece una base m√°s estable para el dise√±o de un sistema software. 
El objetivo es hacer que grandes proyectos sean f√°ciles de gestionar y manejar, mejorando como consecuencia su calidad y reduciendo el n√∫mero de proyectos fallidos.
<br/><br/>
Otra de las grandes promesas de la programaci√≥n orientada a objetos es la creaci√≥n de entidades m√°s gen√©ricas (objetos) que permitan la reutilizaci√≥n del software 
entre proyectos, una de las premisas fundamentales de la Ingenier√≠a del Software. Un objeto gen√©rico ‚Äúcliente‚Ä?, por ejemplo, deber√≠a en teor√≠a tener el mismo conjunto 
de comportamiento en diferentes proyectos, sobre todo cuando estos coinciden en cierta medida, algo que suele suceder en las grandes organizaciones. En este sentido, 
los objetos podr√≠an verse como piezas reutilizables que pueden emplearse en m√∫ltiples proyectos distintos, posibilitando as√≠ a la industria del software construir proyectos 
de envergadura empleando componentes ya existentes y de comprobada calidad, conduciendo esto finalmente a una reducci√≥n dr√°stica del tiempo de desarrollo. 
Podemos usar como ejemplo de objeto el aluminio. Una vez definidos datos (densidad, maleabilidad, etc.), y su ‚Äúcomportamiento‚Ä? (soldar dos piezas, etc.), 
el objeto ‚Äúaluminio‚Ä? puede ser reutilizado en el campo de la construcci√≥n, del autom√≥vil, de la aviaci√≥n, etc.

</p>
<?php $tipo = "java"; include 'comentarios.inc';?>
<?php include 'pie.inc'; ?> 